fileTypes: [
  "qvs"
]
name: "QlikView"
patterns: [
  {
    include: "#scriptStatements"
  }
  {
    include: "#comments"
  }
  {
    include: "#numerics"
  }
  {
    include: "#rangeFunctions"
  }
  {
    include: "#stringFunctions"
  }
  {
    include: "#dateTimeFunctions"
  }
  {
    include: "#interRecordFunctions"
  }
  {
    include: "#counterFunctions"
  }
  {
    include: "#aggregationFunctions"
  }
  {
    include: "#systemFunctions"
  }
  {
    include: "#logicalFunctions"
  }
  {
    include: "#macros"
  }
  {
    include: "#fieldNames"
  }
  {
    match: "&|\\+|\\\\|<|<=|>|>=|\\/|,|;|="
    name: "keyword.operator.qvs"
  }
  {
    begin: "'"
    beginCaptures:
      "0":
        name: "punctuation.definition.string.begin.qvs"
    end: "'"
    endCaptures:
      "0":
        name: "punctuation.definition.string.end.qvs"
    name: "string.quoted.single.qvs"
  }
  {
    comment: "Star * as joker for all fields"
    match: "\\*"
    name: "keyword.operator.star.qvs"
  }
  {
    match: "(?i:\\b(and|or)\\b)"
    name: "keyword.operator.logical.qvs"
  }
  {
    match: "(?i)\\bAS\\b"
    name: "keyword.other.alias.qvs"
  }
  {
    comment: "LOAD and MAPPING LOAD keywords"
    match: "(?i:\\b(qualify)\\b)"
    name: "keyword.other.load.qvs"
  }
  {
    match: "(?i:\\b(concatenate)(?=\\s*\\()\\b)"
    name: "keyword.other.load.qvs"
  }
  {
    match: "(?i)\\b(if|endif|end if|else|then|not)\\b"
    name: "keyword.control.qvs"
  }
  {
    match: "(?i)\\b(applymap|text|if)(?=\\s*\\()"
    name: "support.function.other.qvs"
  }
  {
    captures:
      "1":
        name: "keyword.other.store.qvs"
      "2":
        name: "keyword.other.qvs"
    comment: "STORE xxx INTO"
    match: "(?i:^\\s*(store)\\s+\\[*\\w*\\]*\\s+(into))"
    name: "meta.store.qvs"
  }
  {
    captures:
      "1":
        name: "keyword.other.create.qvs"
      "2":
        name: "keyword.other.qvs"
    comment: "DROP statement"
    match: "(?i:^\\s*(drop)\\s+(table|field))"
    name: "meta.drop.qvs"
  }
]
repository:
  aggregationFunctions:
    patterns: [
      {
        match: "(?i:\\b(sum|max|maxstring|min|avg|count)(?=\\s*\\())"
        name: "support.function.aggregate.qvs"
      }
    ]
  comments:
    patterns: [
      {
        match: "(//).*$\\n?"
        name: "comment.line.double-slash.source.qvs"
      }
      {
        begin: "/\\*"
        captures:
          "0":
            name: "punctuation.definition.comment.qvs"
        end: "\\*/"
        name: "comment.block.qvs"
      }
    ]
  counterFunctions:
    patterns: [
      {
        match: "(?i)\\b(recno|rowno|iterno|autonumberhash128|autonumberhash256|fieldvaluecount)(?=\\s*\\()"
        name: "support.function.other.qvs"
      }
    ]
  dateTimeFunctions:
    patterns: [
      {
        comment: "Functions that take a date as input"
        match: "(?i)\\b(second|minute|hour|day|week|month|year|weekyear|weekday)(?=\\s*\\()"
        name: "support.function.other.qvs"
      }
      {
        match: "(?i)\\b(now|today|localtime|makedate|makeweekdate|maketime)(?=\\s*\\()"
        name: "support.function.other.qvs"
      }
      {
        match: "(?i)\\b(yeartodate|setdateyear|setdateyearmonth|yearstart|yearend|inyear|inyeartodate|inquarter|inquartertodate)(?=\\s*\\()"
        name: "support.function.other.qvs"
      }
      {
        match: "(?i)\\b(addmonths|monthstart|monthend|inmonth|inmonthtodate|inmonths|inmonthstodate|inweek|inweektodate|inlunarweek|inlunarweektodate)(?=\\s*\\()"
        name: "support.function.other.qvs"
      }
      {
        comment: "no imput functions"
        match: "(?i)\\b(timezone|gmt|utc|daylightsaving)(?=\\s*\\(\\))"
        name: "support.function.other.qvs"
      }
      {
        match: "(?i)\\b(date|date#)(?=\\s*\\()"
        name: "support.function.other.qvs"
      }
    ]
  fieldNames:
    patterns: [
      {
        begin: "\""
        beginCaptures:
          "0":
            name: "punctuation.definition.string.begin.qvs"
        end: "\""
        endCaptures:
          "0":
            name: "definition.punctuation.string.end.qvs"
        name: "string.quoted.double.qvs"
      }
      {
        begin: "\\["
        beginCaptures:
          "0":
            name: "punctuation.definition.string.begin.qvs"
        end: "\\]"
        endCaptures:
          "0":
            name: "definition.punctuation.string.end.qvs"
        name: "string.quoted.other.qvs"
      }
    ]
  interRecordFunctions:
    patterns: [
      {
        match: "(?i)\\b(exists|fieldindex|fieldvalue|peek|previous|lookup)(?=\\s*\\()"
        name: "support.function.other.qvs"
      }
    ]
  logicalFunctions:
    patterns: [
      {
        match: "(?i)\\b(isnull)(?=\\s*\\()"
        name: "support.function.other.qvs"
      }
    ]
  macros:
    patterns: [
      {
        captures:
          "1":
            name: "constant.numeric.qvs"
        comment: "Variables like $PARAM1, $TM_SELECTION..."
        match: "\\$\\(([A-Za-z][A-Za-z0-9_]+)\\)"
        name: "keyword.qvs"
      }
    ]
  numerics:
    patterns: [
      {
        match: "\\b([1-9]+[0-9]*|0)"
        name: "constant.numeric.integer.decimal.qvs"
      }
      {
        match: "(?i)\\b(num|dual|ceil|round)(?=\\s*\\()"
        name: "support.function.other.qvs"
      }
    ]
  rangeFunctions:
    patterns: [
      {
        match: "(?i)\\b(rangesum|rangeavg|rangestdev)(?=\\s*\\()"
        name: "support.function.other.qvs"
      }
    ]
  scriptStatements:
    patterns: [
      {
        comment: "LOAD and MAPPING LOAD keywords"
        match: "(?i:\\b(mapping(\\s+load)|join|left join|load|sql\\sselect|inline|resident|autogenerate|from|where|while|group\\sby|order\\sby|asc|desc)\\b)"
        name: "keyword.other.load.qvs"
      }
      {
        match: "(?i)\\b(crosstable)(?=\\s*\\()"
        name: "keyword.other.load.qvs"
      }
      {
        match: "(?i:\\b(add|alias|binary|buffer|bundle|concatenate|directory|intervalmatch|trace|unqualify|qualify|include)\\b)"
        name: "keyword.other.source.qvs"
      }
      {
        match: "(?i:\\b(odbc|connect\\sto)\\b)"
        name: "keyword.other.source.qvs"
      }
      {
        match: "(?i:\\b(set|let)\\b)"
        name: "keyword.other.qvs"
      }
    ]
  stringFunctions:
    patterns: [
      {
        match: "(?i)\\b(len|trim|subfield|left|replace)(?=\\s*\\()"
        name: "support.function.other.qvs"
      }
    ]
  systemFunctions:
    patterns: [
      {
        match: "(?i)\\b(filesize|documentname)(?=\\s*\\()"
        name: "support.function.other.qvs"
      }
    ]
scopeName: "source.qvs"
